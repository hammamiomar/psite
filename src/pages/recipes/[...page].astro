---
import BlogCard from '@/components/BlogCard.astro'
import Breadcrumbs from '@/components/Breadcrumbs.astro'
import PageHead from '@/components/PageHead.astro'
import PaginationComponent from '@/components/ui/pagination'
import { SITE } from '@/consts'
import Layout from '@/layouts/Layout.astro'
import type { PaginateFunction } from 'astro'
import { getCollection } from 'astro:content'

export async function getStaticPaths({
  paginate,
}: {
  paginate: PaginateFunction
}) {
  const allRecipes = await getCollection('recipes', ({ data }) => {
    return import.meta.env.PROD ? !data.draft : true
  })
  const sortedRecipes = allRecipes.sort(
    (a, b) => b.data.date.valueOf() - a.data.date.valueOf()
  )
  return paginate(sortedRecipes, { pageSize: SITE.postsPerPage })
}

const { page } = Astro.props

// Group recipes by year
const recipesByYear = page.data.reduce((acc: Record<string, typeof page.data>, recipe) => {
  const year = recipe.data.date.getFullYear().toString()
  ;(acc[year] ??= []).push(recipe)
  return acc
}, {})
const years = Object.keys(recipesByYear).sort((a, b) => parseInt(b) - parseInt(a))
---

<Layout>
  <PageHead slot="head" title="Recipes" />
  <Breadcrumbs
    items={[
      { label: 'Recipes', href: '/recipes', icon: 'lucide:utensils' },
      { label: `Page ${page.currentPage}`, icon: 'lucide:book-open' },
    ]}
  />

  <div class="flex min-h-[calc(100vh-18rem)] flex-col gap-y-8">
    {
      years.map((year) => (
        <section class="flex flex-col gap-y-4">
          <div class="font-medium">{year}</div>
          <ul class="flex flex-col gap-4">
            {recipesByYear[year].map((recipe) => (
              <li>
                <BlogCard entry={recipe} />
              </li>
            ))}
          </ul>
        </section>
      ))
    }
  </div>

  <PaginationComponent
    currentPage={page.currentPage}
    totalPages={page.lastPage}
    baseUrl="/recipes/"
    client:load
  />
</Layout>